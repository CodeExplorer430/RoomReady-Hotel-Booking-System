/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main.java.roomready.booking.gui;

import main.java.roomready.room.gui.*;
import main.java.roomready.room.*;
import main.java.roomready.utils.ImageRenderer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Image;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.stream.Collectors;

/**
 *
 * @author Miguel
 */
public class AdminBookingManagement extends javax.swing.JPanel {
    
    private AddRoom addRoom;
    private RoomManager roomManager;
    private Timer timer;
    
    /**
     * Creates new form RoomManagement
     */
    public AdminBookingManagement() {
        roomManager = new RoomManager();
        initComponents();
        initTimer();
        loadRoomData();
        refreshRoomTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        searchRoomField = new javax.swing.JTextField();
        dateTimeLabel1 = new javax.swing.JLabel();
        filterComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        updateRoomButton = new javax.swing.JButton();
        deleteRoomButton = new javax.swing.JButton();
        addRoomButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        markRoomButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));
        setPreferredSize(new java.awt.Dimension(800, 400));
        setRequestFocusEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        roomTable.setBackground(new java.awt.Color(102, 102, 102));
        roomTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        roomTable.setForeground(new java.awt.Color(255, 255, 255));
        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Room ID", "Room No.", "Room Type", "Capacity", "Floor", "Room Image", "Status"
            }
        ));
        jScrollPane1.setViewportView(roomTable);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("SEARCH:");

        searchRoomField.setBackground(new java.awt.Color(255, 255, 255));
        searchRoomField.setForeground(new java.awt.Color(51, 51, 51));
        searchRoomField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        searchRoomField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRoomFieldActionPerformed(evt);
            }
        });

        dateTimeLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        dateTimeLabel1.setForeground(new java.awt.Color(51, 51, 51));
        dateTimeLabel1.setText("4/21/2024 | 10:52 PM");

        filterComboBox.setBackground(new java.awt.Color(204, 204, 204));
        filterComboBox.setForeground(new java.awt.Color(0, 0, 0));
        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Occupied", "Available", "Maintenance" }));
        filterComboBox.setSelectedIndex(-1);
        filterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("FILTER:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchRoomField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dateTimeLabel1)
                .addContainerGap(23, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchRoomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTimeLabel1)
                    .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        updateRoomButton.setBackground(new java.awt.Color(154, 51, 35));
        updateRoomButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateRoomButton.setForeground(new java.awt.Color(255, 255, 255));
        updateRoomButton.setText("UPDATE BOOKING");
        updateRoomButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateRoomButton.setFocusable(false);
        updateRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRoomButtonActionPerformed(evt);
            }
        });

        deleteRoomButton.setBackground(new java.awt.Color(154, 51, 35));
        deleteRoomButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteRoomButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteRoomButton.setText("DELETE BOOKING");
        deleteRoomButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteRoomButton.setFocusable(false);
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        addRoomButton.setBackground(new java.awt.Color(154, 51, 35));
        addRoomButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addRoomButton.setForeground(new java.awt.Color(255, 255, 255));
        addRoomButton.setText("ADD BOOKING");
        addRoomButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addRoomButton.setFocusable(false);
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(56, 58, 55));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setBackground(new java.awt.Color(56, 58, 55));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 232, 221));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/java/resources/images/Wow Logo Dashboard.png"))); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setIconTextGap(5);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("BOOKING");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("MANAGEMENT");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(35, 35, 35))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        markRoomButton.setBackground(new java.awt.Color(154, 51, 35));
        markRoomButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        markRoomButton.setForeground(new java.awt.Color(255, 255, 255));
        markRoomButton.setText("CANCEL BOOKING");
        markRoomButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        markRoomButton.setFocusable(false);
        markRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markRoomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(deleteRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(markRoomButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 96, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

     private void initTimer() {
        // Create a Timer with 1-second delay (1000 milliseconds)
        timer = new Timer (0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e){
                // Update the label with the current date and time
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd | HH:mm:ss");
                String currentTime = dateFormat.format(new java.util.Date());
                dateTimeLabel1.setText(currentTime);
            }
        });
        // Start the timer
        timer.start();
    }
    
    private void updateRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRoomButtonActionPerformed
//        int selectedRow = roomTable.getSelectedRow();
//        if(selectedRow != -1){
//            String roomId = (String) roomTable.getValueAt(selectedRow, 0);
//            Room room = roomManager.getRoomById(roomId);
//            if(room != null){
//                UpdateRoom updateRoom = new UpdateRoom(roomManager, room, this);
//                updateRoom.setVisible(true);
//                updateRoom.toFront();
//                refreshRoomTable(); // Refresh the table after updating the room
//            } else {
//                JOptionPane.showMessageDialog(null, "Please select a room to update.");
//            }
//        }
    }//GEN-LAST:event_updateRoomButtonActionPerformed

    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        String roomId = JOptionPane.showInputDialog("Enter Room ID to delete:", "Delete Room");
        if(roomId != null && !roomId.trim().isEmpty()){
            Room room = roomManager.getRoomById(roomId.trim());
            if(room != null){
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this room?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION){
                     roomManager.deleteRoom(roomId.trim());
                     JOptionPane.showMessageDialog(null, "Room deleted successfully!");
                     refreshRoomTable(); // Refresh the table after deleting the room
                } else {
                    JOptionPane.showMessageDialog(null, "Room ID not found.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a valid Room ID.");
            }
        }
    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
//        // Checks if the form is null or closed
//        if(addRoom == null || addRoom.isClosed()){
//            addRoom = new AddRoom(roomManager, this);
//        }
//        
//        // Open the add room form when the button is clicked
//        addRoom.setVisible(true); // Show the add room form 
//        addRoom.toFront(); // Bring the existing instannce to front
//        
//        // Refresh the room table after adding a new room
//        refreshRoomTable();
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void searchRoomFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRoomFieldActionPerformed
        filterAndDisplayRooms(roomManager.loadRooms());
    }//GEN-LAST:event_searchRoomFieldActionPerformed

    private void markRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markRoomButtonActionPerformed
        markSelectedRoom();
    }//GEN-LAST:event_markRoomButtonActionPerformed

    private void filterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboBoxActionPerformed
        filterAndDisplayRooms(roomManager.loadRooms());
    }//GEN-LAST:event_filterComboBoxActionPerformed
    
    public void loadRoomData(){
        List<Room> rooms = roomManager.loadRooms();
        displayRooms(rooms); // Display loaded rooms
    }
    
    public void refreshRoomTable(){
        loadRoomData();
    }
    
    private void filterAndDisplayRooms(List<Room> rooms){
        String filter = (String) filterComboBox.getSelectedItem();
        String searchText = searchRoomField.getText().trim().toLowerCase();
        
        List<Room> filteredRooms = rooms.stream().filter(room ->{
            boolean matchesFilter = true;
            if("Occupied".equals(filter)){
                matchesFilter = room.isOccupied();
            } else if ("Available".equals(filter)){
                matchesFilter = !room.isOccupied() && !room.isUnderMaintenance();
            } else if("Maintenance".equals(filter)){
                matchesFilter = room.isUnderMaintenance();
            }
            
            boolean matchesSearch = room.getRoomId().toLowerCase().contains(searchText) ||
                    room.getRoomType().toLowerCase().contains(searchText) ||
                    String.valueOf(room.getCapacity()).contains(searchText);
                    
            return matchesFilter && matchesSearch;
        })
                .collect(Collectors.toList());
        displayRooms(filteredRooms);
    }
    
    void displayRooms(List<Room> rooms){
        DefaultTableModel model = (DefaultTableModel) roomTable.getModel();
        model.setRowCount(0); // Clear existing data
        
        for (Room room : rooms){
            model.addRow(new Object[]{
                room.getRoomId(),
                room.getRoomNo(),
                room.getRoomType(),
                room.getCapacity(),
                room.getFloor(),
                createImageIcon(room.getRoomImage()),
                getRoomStatus(room)
            });
        }
        
        // Set custom renderer for the image column
        roomTable.getColumnModel().getColumn(5).setCellRenderer(new ImageRenderer());
    }
    
    private ImageIcon createImageIcon(String imagePath){
        if(imagePath != null && !imagePath.isEmpty()){
            ImageIcon imageIcon = new ImageIcon(imagePath);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            return new ImageIcon(image);
        }
        return null;
    }
    
    private String getRoomStatus(Room room){
        if(room.isOccupied()){
            return "Occupied";
        } else if(room.isUnderMaintenance()){
            return "Maintenance";
        } else {
            return "Available";
        }
    }
    
    private void markSelectedRoom(){
        int selectedRow = roomTable.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a room to mark.");
            return;
        }
        
        String roomId = (String) roomTable.getValueAt(selectedRow, 0);
        Room room = roomManager.getRoomById(roomId);
        if(room != null){
            String[] options = {"Occupied", "Available", "Maintenance"};
            String status = (String) JOptionPane.showInputDialog(this, "Select the new status for the room:", "Mark Room Status", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (status != null){
                int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to mark the room as " + status + "?", "Confirm Mark Room", JOptionPane.YES_NO_OPTION);
                if (confirmation == JOptionPane.YES_OPTION){
                switch(status){
                    case "Occupied":
                        room.setOccupied(true);
                        room.setUnderMaintenance(false);
                        break;
                    case "Available":
                        room.setOccupied(false);
                        room.setUnderMaintenance(false);
                        break;
                    case "Maintenance":
                        room.setUnderMaintenance(true);
                        room.setOccupied(false);
                        break;
                }
                roomManager.updateRoom(room);
                loadRoomData();
                JOptionPane.showMessageDialog(this, "Room status updated successfully.");
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoomButton;
    private javax.swing.JLabel dateTimeLabel1;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton markRoomButton;
    private javax.swing.JTable roomTable;
    private javax.swing.JTextField searchRoomField;
    private javax.swing.JButton updateRoomButton;
    // End of variables declaration//GEN-END:variables
}
