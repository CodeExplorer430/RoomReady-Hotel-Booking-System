/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main.java.roomready.booking.gui;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import main.java.roomready.room.Room;
import main.java.roomready.room.RoomManager;
import main.java.roomready.utils.ImageRenderer;

/**
 *
 * @author philipmathewbobis
 */
public class NewFrame extends javax.swing.JPanel {

    public static int DO_NOTHING_ON_CLOSE;
    public static int DISPOSE_ON_CLOSE;

    private AdminBookingManagement adminBooking;
    private RoomManager roomManager;
    
    public NewFrame() {
        initComponents();
        adminBooking = new AdminBookingManagement();
        roomManager = new RoomManager();
        loadRooms();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        roomTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        submitRoomNo = new javax.swing.JButton();
        enterRoom = new javax.swing.JTextField();

        jPanel3.setBackground(new java.awt.Color(218, 215, 205));
        jPanel3.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jPanel3AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel5.setBackground(new java.awt.Color(154, 51, 35));

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Search Available Rooms");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        roomTable1.setBackground(new java.awt.Color(218, 215, 205));
        roomTable1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        roomTable1.setForeground(new java.awt.Color(0, 0, 0));
        roomTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room no.", "Availability", "Type", "Room Capacity", "Floor level", "Room Image"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        roomTable1.setRowHeight(30);
        roomTable1.setShowHorizontalLines(false);
        roomTable1.setShowVerticalLines(false);
        roomTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                roomTable1PropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(roomTable1);

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Enter Room No.");

        submitRoomNo.setBackground(new java.awt.Color(154, 51, 35));
        submitRoomNo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        submitRoomNo.setForeground(new java.awt.Color(255, 255, 255));
        submitRoomNo.setText("Submit");
        submitRoomNo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        submitRoomNo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        submitRoomNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitRoomNoActionPerformed(evt);
            }
        });

        enterRoom.setBackground(new java.awt.Color(255, 255, 255));
        enterRoom.setForeground(new java.awt.Color(0, 0, 0));
        enterRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enterRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submitRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel3AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel3AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3AncestorAdded

    private void enterRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterRoomActionPerformed
        // Check if enter key handling setup is needed
        if (!enterKey){
            setupEnterKeyHandling();
        }
        // Set enter key to true to indicate that setup has been done
        enterKey = true;
    }//GEN-LAST:event_enterRoomActionPerformed

    private void submitRoomNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitRoomNoActionPerformed

        DefaultTableModel model = (DefaultTableModel) roomTable1.getModel();
        String selectedValue = enterRoom.getText();
        boolean foundRoom = false;
        boolean isAvailable = false;
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();

        if(!selectedValue.isEmpty()){
            for (int row = 0;row < rowCount;row++){
                // Get the room number value from the first column of the current row
                Object cellValue = model.getValueAt(row, 0);
                if (cellValue != null && cellValue.toString().equals(selectedValue)){
                    foundRoom = true; // update the found flag
                    Object roomAvailabilty = model.getValueAt(row, 1);
                    if (roomAvailabilty != null && roomAvailabilty.toString().equalsIgnoreCase("Available")){
                        isAvailable = true; // update available room
                        // Return an array conataining the data of the row
                        Object[] rowData = new Object[columnCount];
                        for (int i = 0;i < columnCount;i++){
                            rowData[i] = model.getValueAt(row, i);
                        }
                        Object rateType = model.getValueAt(row, 2);
                        if (rateType != null && rateType.toString().equalsIgnoreCase("Deluxe 1 / Deluxe Double")){
                            JOptionPane.showMessageDialog(null, "Room no. " + rowData[0] +
                                "\nRoom availability: " + rowData[1] +
                                "\nRoom type: " + rowData[2]+
                                "\nRates: 3hrs 395 pesos" +
                                "\n\t\t 6hrs 595 pesos" +
                                "\n\t\t 12hrs 995 pesos" +
                                "\n\t\t 24hrs 1,495 pesos" +
                                "\n\t\t OT 132 pesos","Selected Room",JOptionPane.INFORMATION_MESSAGE);

                        }
                        if (rateType != null && rateType.toString().equalsIgnoreCase("Deluxe 2 / Deluxe Twin")){
                            JOptionPane.showMessageDialog(null, "Room no. " + rowData[0] +
                                "\nRoom availability: " + rowData[1] +
                                "\nRoom type: " + rowData[2]+
                                "\nRates: 3hrs 495 pesos" +
                                "\n\t\t 6hrs 695 pesos" +
                                "\n\t\t 12hrs 1,100 pesos" +
                                "\n\t\t 24hrs 1,595 pesos" +
                                "\n\t\t OT 165 pesos","Selected Room",JOptionPane.INFORMATION_MESSAGE);

                        }
                        if (rateType != null && rateType.toString().equalsIgnoreCase("superior")){
                            JOptionPane.showMessageDialog(null, "Room no. " + rowData[0] +
                                "\nRoom availability: " + rowData[1] +
                                "\nRoom type: " + rowData[2]+
                                "\nRates: 3hrs 695 pesos" +
                                "\n\t\t 6hrs 895 pesos" +
                                "\n\t\t 12hrs 1,195 pesos" +
                                "\n\t\t 24hrs 1,695 pesos" +
                                "\n\t\t OT 265 pesos","Selected Room",JOptionPane.INFORMATION_MESSAGE);

                        }
                        if(rateType != null && rateType.toString().equalsIgnoreCase("Business Class / Studio Suite")){
                            JOptionPane.showMessageDialog(null, "Room no. " + rowData[0] +
                                "\nRoom availability: " + rowData[1] +
                                "\nRoom type: " + rowData[2]+
                                "\nRates: 12 Hours 1295 " +
                                "\n24 Hours 1796","Selected Room",JOptionPane.INFORMATION_MESSAGE);
                        }
                        // Open the next window here
                        SecondFrame fillForm = new SecondFrame(rowData);
                        fillForm.setVisible(true);
                        // Dispose the current window

                        break;
                    }else {
                        if (!isAvailable && roomAvailabilty.toString().equalsIgnoreCase("Occupied")){
                            JOptionPane.showMessageDialog(null, "Room is occupied.", "Not Available!!", JOptionPane.WARNING_MESSAGE);
                        }
                        if (!isAvailable && roomAvailabilty != null && roomAvailabilty.toString().equalsIgnoreCase("Maintenance")){
                            JOptionPane.showMessageDialog(null, "Room is under maintenance.", "Not Available!!", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            }
            if (!foundRoom){
                JOptionPane.showMessageDialog(null, "No Matching room number found", "Room not found", JOptionPane.WARNING_MESSAGE);
            }

        }else {
            JOptionPane.showMessageDialog(null, "Field is empty. Enter room number.","Required!!", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_submitRoomNoActionPerformed

    private void roomTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_roomTable1PropertyChange
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        // Set the default cell renderer for all columns
        roomTable1.setDefaultRenderer(Object.class, dtcr);

        // Set the renderer for the first column
        roomTable1.getColumnModel().getColumn(0).setCellRenderer(dtcr);

        // Set the preferred width for specific columns
        roomTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        roomTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
        roomTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
        roomTable1.getColumnModel().getColumn(3).setPreferredWidth(120);
        roomTable1.getColumnModel().getColumn(4).setPreferredWidth(120);
        roomTable1.getColumnModel().getColumn(5).setPreferredWidth(200);
    }//GEN-LAST:event_roomTable1PropertyChange

    private boolean buttonClicked = false;
    
    
    public void loadRooms(){
        List<Room> rooms = roomManager.loadRooms();
        displayRooms(rooms);
    }
    
    public void displayRooms(List<Room> rooms){
        DefaultTableModel model = (DefaultTableModel) roomTable1.getModel();
        model.setRowCount(0);
        
        for(Room room : rooms){
            model.addRow(new Object[]{
                room.getRoomNo(),
                roomStatus(room),
                room.getRoomType(),
                room.getCapacity(),
                room.getFloor(),
                createImageIcon(room.getRoomImage())
            });
        }
        
        roomTable1.getColumnModel().getColumn(5).setCellRenderer(new ImageRenderer());
    }
    
    private ImageIcon createImageIcon(String imagePath){
        if(imagePath != null && !imagePath.isEmpty()){
            ImageIcon imageIcon = new ImageIcon(imagePath);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            return new ImageIcon(image);
        }
        return null;
    }
    
    private String roomStatus(Room room){
        if(room.isOccupied()){
            return "Occupied";
        }else if (room.isUnderMaintenance()){
            return "Maintenance";
        }else{
            return "Available";
        }
    }
    
    private void setupEnterKeyHandling(){
        // Add action listener to the Enter Room no.
        enterRoom.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                submitRoomNo.doClick();
            }
        });
    }
    
    // Declare a boolean variable to track whether the enter key has been pressed
    private boolean enterKey = false;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField enterRoom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable roomTable;
    private javax.swing.JTable roomTable1;
    private javax.swing.JButton submitRoomNo;
    // End of variables declaration//GEN-END:variables
}
