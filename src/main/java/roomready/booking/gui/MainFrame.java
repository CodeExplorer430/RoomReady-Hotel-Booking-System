package main.java.roomready.booking.gui;



import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author philipmathewbobis
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        showRooms = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        submitRoomNo = new javax.swing.JButton();
        enterRoom = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Wow Hotel");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(218, 215, 205));
        jPanel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jPanel1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 25)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(36, 29, 29));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bed.png"))); // NOI18N
        jLabel1.setText("Room Reservation");

        jPanel4.setBackground(new java.awt.Color(212, 163, 115));

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 8, 20));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/magnifier.png"))); // NOI18N
        jLabel2.setText("Search Available Rooms");

        showRooms.setBackground(new java.awt.Color(212, 163, 115));
        showRooms.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        showRooms.setText("Show Rooms");
        showRooms.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showRooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRoomsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(336, 336, 336))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showRooms)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        roomTable.setBackground(new java.awt.Color(218, 215, 205));
        roomTable.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        roomTable.setForeground(new java.awt.Color(0, 0, 0));
        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room no.", "Availability", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        roomTable.setRowHeight(30);
        roomTable.setShowHorizontalLines(false);
        roomTable.setShowVerticalLines(false);
        roomTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                roomTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(roomTable);
        if (roomTable.getColumnModel().getColumnCount() > 0) {
            roomTable.getColumnModel().getColumn(0).setHeaderValue("Room no.");
            roomTable.getColumnModel().getColumn(1).setHeaderValue("Availability");
            roomTable.getColumnModel().getColumn(2).setHeaderValue("Type");
        }

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Enter Room No.");

        submitRoomNo.setBackground(new java.awt.Color(218, 215, 205));
        submitRoomNo.setFont(new java.awt.Font("Dialog", 2, 16)); // NOI18N
        submitRoomNo.setText("Submit");
        submitRoomNo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        submitRoomNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitRoomNoActionPerformed(evt);
            }
        });

        enterRoom.setBackground(new java.awt.Color(255, 255, 255));
        enterRoom.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 161, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(157, 157, 157))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(submitRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 297, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enterRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submitRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean buttonClicked = false;
    
    private void showRoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRoomsActionPerformed
        if(!buttonClicked){ // Check if the button has not been clicked before
        final String pathFile = "C:\\Users\\philipmathewbobis\\OneDrive\\Desktop\\Database for Booking System\\Rooms.txt";
        final String DELIMITER = "|";
        
        try(BufferedReader reader = new BufferedReader(new FileReader(pathFile))){
            String header  = reader.readLine(); // read and discard first line 
            String line;
            DefaultTableModel model = (DefaultTableModel) roomTable.getModel();
            
            while ((line = reader.readLine()) != null){
                String[] data = line.split("\\|");
                
                if(data.length >= 3){
                    String roomAvaillabilty = data[1];
                    String roomType = data[2];
                    
                    int roomNumber = 0;
                    if(data[0].matches("\\d+")){
                        roomNumber = Integer.parseInt(data[0]);
                    }
                    
                    model.addRow(new Object[]{roomNumber,roomAvaillabilty,roomType});
                    
                }else {
                   JOptionPane.showMessageDialog(null, "Invalid data line.","An Error Occured",JOptionPane.ERROR_MESSAGE);
                } 
            }
        }catch (IOException e){
            e.printStackTrace();
        }
            buttonClicked = true;
        } else {
            JOptionPane.showMessageDialog(null, "You've already added the data. Clicking again will have no effect.","Already added", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_showRoomsActionPerformed

    private void roomTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_roomTablePropertyChange
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        
        // Set the default cell renderer for all columns
        roomTable.setDefaultRenderer(Object.class, dtcr);
        
        // Set the renderer for the first column
        roomTable.getColumnModel().getColumn(0).setCellRenderer(dtcr);
    }//GEN-LAST:event_roomTablePropertyChange
    
    private void submitRoomNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitRoomNoActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) roomTable.getModel();
        String selectedValue = enterRoom.getText();
        boolean foundRoom = false;
        boolean isAvailable = false;
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();
        
           
        if(!selectedValue.isEmpty()){
            for (int row = 0;row < rowCount;row++){
            // Get the room number value from the first column of the current row
            Object cellValue = model.getValueAt(row, 0);
            if (cellValue != null && cellValue.toString().equals(selectedValue)){
                foundRoom = true; // update the found flag
                Object roomAvailabilty = model.getValueAt(row, 1);
                if (roomAvailabilty != null && roomAvailabilty.toString().equalsIgnoreCase("Available")){
                    isAvailable = true; // update availabl room
                    // Return an array conataining the data of the row
                    Object[] rowData = new Object[columnCount];
                    for (int i = 0;i < columnCount;i++){
                        rowData[i] = model.getValueAt(row, i);
                    }
                    JOptionPane.showMessageDialog(null, "Room no. " + rowData[0] +
                                                                      "\nRoom availability: " + rowData[1] +
                                                                      "\nRoom type: " + rowData[2],"Selected Room",JOptionPane.INFORMATION_MESSAGE);
                // Open the next window here 
                SecondFrame fillForm = new SecondFrame(rowData);
                fillForm.setVisible(true);
                // Dispose the current window
                dispose();
                break;
                }else {
                    if (!isAvailable){
                JOptionPane.showMessageDialog(null, "Room Not Available", "Not Available!!", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
            if (!foundRoom){
                JOptionPane.showMessageDialog(null, "No Matching room number found", "Room not found", JOptionPane.WARNING_MESSAGE);
            }
            
        }else {
            JOptionPane.showMessageDialog(null, "Field is empty. Enter room number.","Required!!", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_submitRoomNoActionPerformed

    private void jPanel1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1AncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField enterRoom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable roomTable;
    private javax.swing.JButton showRooms;
    private javax.swing.JButton submitRoomNo;
    // End of variables declaration//GEN-END:variables
}
