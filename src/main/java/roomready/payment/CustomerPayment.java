/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.java.roomready.payment;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import main.java.roomready.booking.gui.MainFrame;

/**
 *
 * @author philipmathewbobis
 */
public class CustomerPayment extends javax.swing.JFrame {

    static String username;
    
    public CustomerPayment() {
        initComponents();
        showBookings();
        initializeComponents();
    }

    public CustomerPayment(String username){
        this.username = username;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void initializeComponents(){
        // Initialize components here
        
        // Add a WindowlListener to the frame
        this.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                // Call your validation here 
                boolean isValid = validateBeforeClose();
                if (!isValid){
                    // If validation fails or the user do unnecessary, cancel the window close operation
                    setDefaultCloseOperation(MainFrame.DO_NOTHING_ON_CLOSE);
                } else {
                    // If validation process or yes, will close the window
                    setDefaultCloseOperation(MainFrame.DISPOSE_ON_CLOSE);
                }
            }
        });
    }
    
     private boolean validateBeforeClose(){
            
       // Get the choice of the user if want to close the window or frame
       int choice = JOptionPane.showConfirmDialog(this, "Do you want to close?","Confirmation",JOptionPane.YES_NO_OPTION);
       return choice == JOptionPane.YES_OPTION; // return the value of choice of equal to YES_OPTION 
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textRoomNumber = new javax.swing.JTextField();
        pay = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();

        jPasswordField1.setText("jPasswordField1");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Payment Processing (Wow Hotel)");

        jPanel1.setBackground(new java.awt.Color(248, 244, 225));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jPanel4.setBackground(new java.awt.Color(56, 58, 55));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setBackground(new java.awt.Color(56, 58, 55));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 232, 221));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/java/resources/images/Wow Logo Dashboard.png"))); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setIconTextGap(5);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Payment");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Processing");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("ENTER");

        textRoomNumber.setBackground(new java.awt.Color(255, 255, 255));
        textRoomNumber.setForeground(new java.awt.Color(51, 51, 51));
        textRoomNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        textRoomNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textRoomNumberActionPerformed(evt);
            }
        });

        pay.setBackground(new java.awt.Color(154, 51, 35));
        pay.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        pay.setForeground(new java.awt.Color(255, 255, 255));
        pay.setText("Pay");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("ROOM NO:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(410, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        paymentTable.setBackground(new java.awt.Color(218, 215, 205));
        paymentTable.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        paymentTable.setForeground(new java.awt.Color(0, 0, 0));
        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Room no", "Room type", "Floor level", "Hours", "Date", "Total Cost", "Payment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        paymentTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                paymentTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(paymentTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane1))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) paymentTable.getModel();
        String roomNoString = textRoomNumber.getText();
        String pendingPayment = "Pending Payment";
        int rowCount = tableModel.getRowCount();
        int columnCount = tableModel.getColumnCount();
        boolean foundRoom = false;
        boolean isPending = false;
        boolean successPayment = false;
        
        if (!roomNoString.isEmpty()){
            for (int row  = 0;row < rowCount;row++){
                // Get the room number value from the first column of the current row
                Object cellValue = tableModel.getValueAt(row, 0);
                if (cellValue != null && cellValue.toString().equals(roomNoString)){
                    foundRoom = true; // update the found flag
                    Object paymentStatus = tableModel.getValueAt(row,6);
                    if (paymentStatus != null && paymentStatus.toString().equalsIgnoreCase(pendingPayment)){
                        isPending = true; // update the found flag for pending payment
                        // Return an array containing the data of the row 
                        Object[] rowData = new Object[columnCount];
                        for (int i = 0;i < columnCount;i++){
                            rowData[i] = tableModel.getValueAt(row, i);
                        }
                        String input = JOptionPane.showInputDialog(null,"Enter Amount to pay?","Gcash",JOptionPane.QUESTION_MESSAGE);
                        
                        if (input == null){
                            JOptionPane.showMessageDialog(null, "Payment cancelled.",
                                    "Cancelled",JOptionPane.INFORMATION_MESSAGE);
                            return; 
                        }
                        
                        if (!input.isEmpty() && input.matches("\\d+")){
                            double amount = Double.parseDouble(input);
                            double toPayAmount = Double.parseDouble(rowData[5].toString());
                            
                            while (amount < toPayAmount){
                                input = JOptionPane.showInputDialog(null,"Please add: " + (toPayAmount - amount),
                              "Add",JOptionPane.INFORMATION_MESSAGE);
                                
                                if (input == null){
                                    // Handle where the user cancels the input dialog
                                    JOptionPane.showMessageDialog(null, "Payment cancelled.", "Cancelled", JOptionPane.WARNING_MESSAGE);
                                    break;
                                }
                                
                                try {
                                    // Parse the additional payment
                                    double additionalPayment = Double.parseDouble(input);
                                    
                                    if (additionalPayment <= 0){
                                        JOptionPane.showMessageDialog(null,"Invalid Payment, Please Enter a positive number",
                                    "Invalid input",JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        amount += additionalPayment;
                                    }
                                } catch (NumberFormatException e){
                                    JOptionPane.showMessageDialog(null, "Invalid amount. Please enter a valid number.", 
                                      "Invalid Input", JOptionPane.ERROR_MESSAGE);
                                }
                            } 
                            
                            if (amount >= toPayAmount){
                                if (amount > toPayAmount){
                                    JOptionPane.showMessageDialog(null,"Change: " + (amount - toPayAmount),
                               "Payment Successfull",JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Payment Successful.", 
                                "Successful", JOptionPane.INFORMATION_MESSAGE);
                                }
                                successPayment = true; // update the success payment
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Enter a valid amount.",
                                    "Invalid Amount",JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        
                        if (successPayment){
                            updatePayment(rowData); // after success payment pass the data to the method
                        }
                        
                    }else {
                        JOptionPane.showMessageDialog(null, "You've already Paid this booking.",
                                "Paid",JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
            if (!foundRoom){
                JOptionPane.showMessageDialog(null, "No Matching room number found!!",
                        "Not Existing",JOptionPane.INFORMATION_MESSAGE);
            }
        }else {
            JOptionPane.showMessageDialog(null, "Text field is empty. \nEnter room number",
                    "Field Empty!!",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_payActionPerformed

    
    public void updatePayment(Object[] rowData){
        String filePath = "src/main/java/resources/data/Payments.txt";
        String DELIMITER = "|";
        String userNameAccount = username;
        int roomNumber = Integer.parseInt(rowData[0].toString());
        int hours = Integer.parseInt(rowData[3].toString());
        String roomType = rowData[1].toString();
        String floorLevel = rowData[2].toString();
        String date = rowData[4].toString();
        double totalAmount = Double.parseDouble(rowData[5].toString());
        String paidStatus = "Paid";
        boolean isPending = false;
        boolean foundUsername = false;
        boolean foundRoomInFile = false;
        boolean succesfullyPaid = false;
        
        StringBuilder updatedContent = new StringBuilder();
        
        try(BufferedReader reader = new BufferedReader(new FileReader(filePath))){
            String line;
            
            while ((line = reader.readLine()) != null){
                String[] data = line.split("\\" + DELIMITER);
                String usernameInFile = data[0];
                
                // Check if the current log username is in the one to update
                if (userNameAccount.equals(usernameInFile)){
                    foundUsername = true;
                    int fileRoomNumber = Integer.parseInt(data[2]);
                    if (roomNumber == fileRoomNumber){
                        foundRoomInFile = true; // update the found room in the file
                        // Check if the booking is paid or not
                        if ("Pending Payment".equalsIgnoreCase(data[8])){
                        isPending = true; // update pending flag
                        data[8] = paidStatus;
                      }
                    }
                    
                    line = String.join(DELIMITER, data);
                }
                // Append the line to the stringbuilder
                updatedContent.append(line).append(System.lineSeparator());
            }
            
            if (!foundRoomInFile){
                            JOptionPane.showMessageDialog(null, "Room not found in the File",
                                "Not Found",JOptionPane.WARNING_MESSAGE);
                        }
        }catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error processing file",
                    "Error",JOptionPane.ERROR_MESSAGE);
        }
        
        try(BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))){
            writer.write(updatedContent.toString());
            JOptionPane.showMessageDialog(null, "Successfully Paid",
                    "Success",JOptionPane.INFORMATION_MESSAGE);
            succesfullyPaid = true;
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, "Error processing file.",
                    "Error",JOptionPane.ERROR_MESSAGE);
        }
        
        if (succesfullyPaid){
            showBookings(); // update the bookings in the table
        }
        
    }
    
    public void showBookings(){
        final String filePath = "src/main/java/resources/data/Payments.txt";
        String DELIMTER = "|";
        
        try(BufferedReader reader = new BufferedReader(new FileReader(filePath))){
            String line;
            DefaultTableModel tableModel = (DefaultTableModel) paymentTable.getModel();
            
            tableModel.setRowCount(0); // Clear existing data or rows in the table
            
            while((line = reader.readLine()) != null){
                String[] data = line.split("\\|");
                
                if (data.length >= 7){
                    String userName = data[0];
                    String roomType = data[3];
                    String floorLevel = data[5];
                    String date = data[6];
                    String paymentStatus = data[8];
                    int roomNo = Integer.parseInt(data[2]);
                    int hours = Integer.parseInt(data[4]);
                    double totalAmount = Double.parseDouble(data[7]);
                    
                    if(username.equals(userName)){ // validate current login account to only show the current users booking details
                        tableModel.addRow(new Object[]{roomNo,roomType,floorLevel,hours,date,totalAmount,paymentStatus});
                    }
                    
                }else {
                    JOptionPane.showMessageDialog(null, "Invalid data line", "Invalid", JOptionPane.WARNING_MESSAGE);
                }
            }
        }catch (IOException e){
            JOptionPane.showMessageDialog(null,"Error processing file","Error",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    // Declare a boolean variable to track whether the enter key has been pressed
    private boolean enterKey = false;
    
    private void textRoomNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textRoomNumberActionPerformed
        // Check if enter key handling setup is needed
        if (!enterKey){
            setupEnterKeyHandling();
        }
        // Set enter key to true to indicate that setup has been done
        enterKey = true;
    }//GEN-LAST:event_textRoomNumberActionPerformed

    private void setupEnterKeyHandling(){
        // Add action listener to the Enter Room no.
        textRoomNumber.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                pay.doClick();
            }
        });
    }
    
    private void paymentTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_paymentTablePropertyChange
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        DefaultTableModel tableModel = (DefaultTableModel) paymentTable.getModel();
        int columnCount = tableModel.getColumnCount();
        
        // Set the default cell renderer for all columns
        paymentTable.setDefaultRenderer(Object.class, dtcr);
        // set the renderer for columns
        for(int i = 0;i < columnCount;i++){
            paymentTable.getColumnModel().getColumn(i).setCellRenderer(dtcr);
        }
        
        paymentTable.setRowHeight(100);
        
        // Set preffered size on specific columns
        paymentTable.getColumnModel().getColumn(1).setPreferredWidth(230);
        paymentTable.getColumnModel().getColumn(3).setPreferredWidth(70);
        paymentTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        paymentTable.getColumnModel().getColumn(5).setPreferredWidth(80);
    }//GEN-LAST:event_paymentTablePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerPayment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton pay;
    private javax.swing.JTable paymentTable;
    private javax.swing.JTextField textRoomNumber;
    // End of variables declaration//GEN-END:variables
}
